Context
=======

Software, something made by humans, is not perfect. Formally we call those imperfections "bugs". Informally we curse the computer.

Solving bugs it's a manual and time consuming task. Wouldn't be great to have an automated way to solve them? What if a program can solve or help solve some of them?

Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.
 Rick Cook, The Wizardry Compiled

Case study
==== =====

The idea is to try to solve a bug in a conditional expression using as input the source code and a set of tests with at least one failing test.

That's the input of the tool.

The output is a patched java file. The tool does not require any additional input like models or contracts.

-- Oracle-Guided Component-Based Program Synthesis + Semfix: An automated repair method based on symbolic execution, constraint solving and program synthesis

-- Synthesis of Loop-free Programs



Problems
========

It will fail if a test exercises both branches of the conditional.

Like in the Commons Math case it can 

Obvious but easy to forget, it will find a fix, no THE fix.


Making it easy to solve may avoid "the blame game".


Semfix: An automated repair method based on symbolic execution, constraint solving and program synthesis. Semfix tries to fix a bug using symbolic execution, an SMT solver and program synthesis.
