/*
 * Copyright (C) 2013 INRIA
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
package fr.inria.lille.jsemfix.gzoltar;

import java.util.Arrays;

/**
 * <p>
 * See the Guava User Guide on <a
 * href="http://code.google.com/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">writing {@code Object} methods
 * with {@code Objects}</a>.
 * 
 * @author Laurence Gonsalves
 * @author Favio D. DeMarco
 */
public final class Objects {

	private Objects() {}

	/**
	 * Buggy {@code equal} function, it throws a {@link NullPointerException} if the first parameter is {@code null} and
	 * the second one is not.
	 * <p>
	 * Determines whether two possibly-null objects are equal. Returns:
	 * 
	 * <ul>
	 * <li>{@code true} if {@code a} and {@code b} are both null.
	 * <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to
	 * {@link Object#equals(Object)}.
	 * <li>{@code false} in all other situations.
	 * </ul>
	 * 
	 * <p>
	 * This assumes that any non-null objects passed to this function conform to the {@code equals()} contract.
	 */
	public static boolean equal(Object a, Object b) {
		// it should be:
		// return a == b || (a != null && a.equals(b));
		boolean sameInstance = a == b;
		boolean equal = sameInstance || a.equals(b);
		return equal;
	}

	/**
	 * Generates a hash code for multiple values. The hash code is generated by calling
	 * {@link Arrays#hashCode(Object[])}.
	 * 
	 * <p>
	 * This is useful for implementing {@link Object#hashCode()}. For example, in an object that has three properties,
	 * {@code x}, {@code y}, and {@code z}, one could write:
	 * 
	 * <pre>
	 * public int hashCode() {
	 * 	return Objects.hashCode(getX(), getY(), getZ());
	 * }
	 * </pre>
	 * 
	 * <b>Warning</b>: When a single object is supplied, the returned hash code does not equal the hash code of that
	 * object.
	 */
	public static int hashCode(Object... objects) {
		return Arrays.hashCode(objects);
	}
}
